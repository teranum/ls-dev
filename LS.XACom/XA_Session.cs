// This file was auto generated by ComType Tool at 2025-01-26 오후 3:34:30
// File : C:\LS_SEC\xingAPI\XA_Session.dll
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace LS.XACom
{
    [ComImport]
    [Guid("6D45238D-A5EB-4413-907A-9EA14D046FE5")]
    [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
    internal interface _IXASessionEvents
    {
        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(1)]
        void Login([MarshalAs(UnmanagedType.BStr)] string szCode, [MarshalAs(UnmanagedType.BStr)] string szMsg);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(2)]
        void Logout();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(3)]
        void Disconnect();

    }

    [ComImport]
    [Guid("8C0F4618-3BAB-4F19-A59B-A32E08EA711F")]
    [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
    internal interface IXASession
    {
        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(1)]
        bool IsLoadAPI();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(2)]
        bool ConnectServer([MarshalAs(UnmanagedType.BStr)] string szServerIP, int nServerPort);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(3)]
        void DisconnectServer();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(4)]
        bool IsConnected();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(5)]
        bool Login([MarshalAs(UnmanagedType.BStr)] string szID, [MarshalAs(UnmanagedType.BStr)] string szPwd, [MarshalAs(UnmanagedType.BStr)] string szCertPwd, int nServerType, bool bShowCertErrDlg);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(7)]
        bool Logout();

        [DispId(8)]
        int ConnectTimeOut
        {
            [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
            [DispId(8)]
            get;
            [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
            [DispId(8)]
            [param: In]
            set;
        }

        [DispId(9)]
        int SendPacketSize
        {
            [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
            [DispId(9)]
            get;
            [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
            [DispId(9)]
            [param: In]
            set;
        }

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(10)]
        int GetLastError();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(11)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetErrorMessage(int nErrorCode);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(12)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetCommMedia();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(13)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetETKMedia();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(14)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetClientIP();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(15)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetServerName();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(16)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetAccountList(int nIndex);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(17)]
        int GetAccountListCount();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(18)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetAccountName([MarshalAs(UnmanagedType.BStr)] string szAcc);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(19)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetAcctDetailName([MarshalAs(UnmanagedType.BStr)] string szAcc);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(20)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetAcctNickname([MarshalAs(UnmanagedType.BStr)] string szAcc);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(21)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetPath();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(22)]
        void SetPath([MarshalAs(UnmanagedType.BStr)] string szPath);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(23)]
        bool SetMode([MarshalAs(UnmanagedType.BStr)] string szMode, [MarshalAs(UnmanagedType.BStr)] string szValue);

    }

    /// <summary>Login 이벤트</summary>
    public class _IXASessionEvents_LoginEventArgs(string szCode, string szMsg) : EventArgs
    {
        /// <summary>szCode</summary>
        public string szCode = szCode;
        /// <summary>szMsg</summary>
        public string szMsg = szMsg;
    }

    [ClassInterface(ClassInterfaceType.None)]
    internal class XASessionClassEventMulticaster(XASessionClass parent) : _IXASessionEvents
    {
        public void Login(string szCode, string szMsg) => parent.RaiseOnLogin(this, new(szCode, szMsg));
        public void Logout() => parent.RaiseOnLogout(this, EventArgs.Empty);
        public void Disconnect() => parent.RaiseOnDisconnect(this, EventArgs.Empty);
    }

    /// <summary>XASessionClass</summary>
    [Guid("7FEF321C-6BFD-413C-AA80-541A275434A1")]
    public class XASessionClass
    {
        // public const string PROGID = "XA_Session.XASession.1";

        private readonly IXASession com;

        /// <summary>Login event</summary>
        public event EventHandler<_IXASessionEvents_LoginEventArgs> OnLogin;
        /// <summary>Logout event</summary>
        public event EventHandler OnLogout;
        /// <summary>Disconnect event</summary>
        public event EventHandler OnDisconnect;

        internal void RaiseOnLogin(object sender, _IXASessionEvents_LoginEventArgs e) => OnLogin?.Invoke(this, e);
        internal void RaiseOnLogout(object sender, EventArgs e) => OnLogout?.Invoke(this, e);
        internal void RaiseOnDisconnect(object sender, EventArgs e) => OnDisconnect?.Invoke(this, e);

        /// <inheritdoc cref="IXASession.IsLoadAPI"/>
        public bool IsLoadAPI() => com.IsLoadAPI();
        /// <inheritdoc cref="IXASession.ConnectServer"/>
        public bool ConnectServer(string szServerIP, int nServerPort) => com.ConnectServer(szServerIP, nServerPort);
        /// <inheritdoc cref="IXASession.DisconnectServer"/>
        public void DisconnectServer() => com.DisconnectServer();
        /// <inheritdoc cref="IXASession.IsConnected"/>
        public bool IsConnected() => com.IsConnected();
        /// <inheritdoc cref="IXASession.Login"/>
        public bool Login(string szID, string szPwd, string szCertPwd, int nServerType, bool bShowCertErrDlg) => com.Login(szID, szPwd, szCertPwd, nServerType, bShowCertErrDlg);
        /// <inheritdoc cref="IXASession.Logout"/>
        public bool Logout() => com.Logout();
        /// <inheritdoc cref="IXASession.ConnectTimeOut"/>
        public int ConnectTimeOut { get => com.ConnectTimeOut; set => com.ConnectTimeOut = value; }
        /// <inheritdoc cref="IXASession.SendPacketSize"/>
        public int SendPacketSize { get => com.SendPacketSize; set => com.SendPacketSize = value; }
        /// <inheritdoc cref="IXASession.GetLastError"/>
        public int GetLastError() => com.GetLastError();
        /// <inheritdoc cref="IXASession.GetErrorMessage"/>
        public string GetErrorMessage(int nErrorCode) => com.GetErrorMessage(nErrorCode);
        /// <inheritdoc cref="IXASession.GetCommMedia"/>
        public string GetCommMedia() => com.GetCommMedia();
        /// <inheritdoc cref="IXASession.GetETKMedia"/>
        public string GetETKMedia() => com.GetETKMedia();
        /// <inheritdoc cref="IXASession.GetClientIP"/>
        public string GetClientIP() => com.GetClientIP();
        /// <inheritdoc cref="IXASession.GetServerName"/>
        public string GetServerName() => com.GetServerName();
        /// <inheritdoc cref="IXASession.GetAccountList"/>
        public string GetAccountList(int nIndex) => com.GetAccountList(nIndex);
        /// <inheritdoc cref="IXASession.GetAccountListCount"/>
        public int GetAccountListCount() => com.GetAccountListCount();
        /// <inheritdoc cref="IXASession.GetAccountName"/>
        public string GetAccountName(string szAcc) => com.GetAccountName(szAcc);
        /// <inheritdoc cref="IXASession.GetAcctDetailName"/>
        public string GetAcctDetailName(string szAcc) => com.GetAcctDetailName(szAcc);
        /// <inheritdoc cref="IXASession.GetAcctNickname"/>
        public string GetAcctNickname(string szAcc) => com.GetAcctNickname(szAcc);
        /// <inheritdoc cref="IXASession.GetPath"/>
        public string GetPath() => com.GetPath();
        /// <inheritdoc cref="IXASession.SetPath"/>
        public void SetPath(string szPath) => com.SetPath(szPath);
        /// <inheritdoc cref="IXASession.SetMode"/>
        public bool SetMode(string szMode, string szValue) => com.SetMode(szMode, szValue);

        #region 생성자

        private readonly System.Runtime.InteropServices.ComTypes.IConnectionPoint _pConnectionPoint;

        /// <summary>생성 여부</summary>
        public bool Created { get; private set; }

        /// <summary>생성자</summary>
        public XASessionClass()
        {
            try
            {
                object pUnknown = Activator.CreateInstance(Type.GetTypeFromCLSID(GetType().GUID));
                if (pUnknown != null)
                {
                    com = (IXASession)pUnknown;
                    if (com != null)
                    {
                        Guid guidEvents = typeof(_IXASessionEvents).GUID;
                        var pConnectionPointContainer = (System.Runtime.InteropServices.ComTypes.IConnectionPointContainer)pUnknown;
                        pConnectionPointContainer.FindConnectionPoint(ref guidEvents, out _pConnectionPoint);
                        if (_pConnectionPoint != null)
                        {
                            XASessionClassEventMulticaster pEventSink = new(this);
                            _pConnectionPoint.Advise(pEventSink, out int nCookie);
                            Created = true;
                        }
                    }
                }
            }
            catch (Exception)
            {
            }
        }
        #endregion
    }

}

